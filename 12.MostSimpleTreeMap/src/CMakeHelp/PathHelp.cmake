message(STATUS "include PathHelp.cmake")

function(FolderTra_GetFileAndDir result rootdir)
	file(GLOB all LIST_DIRECTORIES true ${rootdir}/*)
	set(${result} ${all} PARENT_SCOPE)
endfunction()

function(FolderTra_GetFile result rootdir)
	file(GLOB allfile LIST_DIRECTORIES false ${rootdir}/*)
	set(${result} ${allfile} PARENT_SCOPE)
endfunction()

function(FolderTra_GetDir result rootdir)
	file(GLOB all LIST_DIRECTORIES true ${rootdir}/*)
	foreach(fileordir ${all})
		if (IS_DIRECTORY ${fileordir})    
			LIST(APPEND alldir ${fileordir})
		endif()
	endforeach()
	set(${result} ${alldir} PARENT_SCOPE)
endfunction()

function(FolderTraRCS_GetFileAndDir result rootdir)
	file(GLOB_RECURSE all LIST_DIRECTORIES true ${rootdir}/*)
	set(${result} ${all} PARENT_SCOPE)
endfunction()

function(FolderTraRCS_GetFile result rootdir)
	file(GLOB_RECURSE allfile LIST_DIRECTORIES false ${rootdir}/*)
	set(${result} ${allfile} PARENT_SCOPE)
endfunction()

function(FolderTraRCS_GetDir result rootdir)
	file(GLOB_RECURSE all LIST_DIRECTORIES true ${rootdir}/*)
	foreach(fileordir ${all})
		if (IS_DIRECTORY ${fileordir})    
			LIST(APPEND alldir ${fileordir})
		endif()
	endforeach()
	set(${result} ${alldir} PARENT_SCOPE)
endfunction()



function(FolderTra_GetCode result rootdir)
	file(GLOB allcode "${rootdir}/*.h" "${rootdir}/*.hpp" "${rootdir}/*.cpp" "${rootdir}/*.c" "${rootdir}/*.inl")
	set(${result} ${allcode} PARENT_SCOPE)
endfunction()

function(FolderTraRCS_GetCode result rootdir)
	file(GLOB_RECURSE allcode "${rootdir}/*.h" "${rootdir}/*.hpp" "${rootdir}/*.cpp" "${rootdir}/*.c" "${rootdir}/*.inl")
	set(${result} ${allcode} PARENT_SCOPE)
endfunction()

function(SrcCodeGroup rootdir)
	message("\n")
	FolderTraRCS_GetDir(dirlist ${rootdir})
	LIST(APPEND dirlist ${rootdir})

	foreach(dir ${dirlist})
		FolderTra_GetCode(dircode ${dir})
		list(LENGTH dircode len)
		
		if (NOT (${dir} STREQUAL ${rootdir}))  
			string(REPLACE "${rootdir}" "" groupname ${dir})
			message("${groupname}     ${len}")
			if (${len} STRGREATER 0)  
				source_group(${groupname} FILES ${dircode})
			endif()
		else()
			message("/     ${len}")
			if (${len} STRGREATER 0) 
				source_group("/" FILES ${dircode})
			endif()
		endif()
	endforeach()
	message("\n")
endfunction()

STRING( REGEX REPLACE "/proj$" "" PROJECT_SOURCE_DIR_FATHER ${PROJECT_BINARY_DIR} )
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR_FATHER}/bin")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${PROJECT_SOURCE_DIR_FATHER}/bin")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${PROJECT_SOURCE_DIR_FATHER}/bin")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR_FATHER}/lib")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${PROJECT_SOURCE_DIR_FATHER}/lib")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${PROJECT_SOURCE_DIR_FATHER}/lib")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR_FATHER}/lib")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG "${PROJECT_SOURCE_DIR_FATHER}/lib")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE "${PROJECT_SOURCE_DIR_FATHER}/lib")

